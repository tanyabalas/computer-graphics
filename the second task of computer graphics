#include <iostream>
#include <math.h>
#include <algorithm>
#include "tgaimage.h"
#include "tgaimage.cpp"


using namespace std;

const TGAColor white = TGAColor(255, 255, 255, 255);

void BrezenhemLine (int x0, int y0, int x1, int y1, TGAImage image)
{
    if (x1 < x0 && y1 < y0)
    {
        swap(x1,x0);
        swap(y1,y0);
    }
    else if (x1 < x0)
        swap (x1, x0);
    else if (y1 < y0)
        swap (y1, y0);

    int dx = x1 - x0, dy = y1 - y0, d = 2 * dy - dx, x = x0, y = y0;

    do {
        image.set(x, y, white);
        if (d < 0)
            d += 2 * dy;
        else {
            d += 2 * (dy - dx);
            ++y;
        }
        ++x;
    }
    while (x <= x1);
    image.write_tga_file("BrezenhemLine.tga");
}

void DrawLineDDA(int x0, int y0, int x1, int y1, TGAImage image)
{
    if (x1 < x0 && y1 < y0) {
        swap(x1, x0);
        swap(y1, y0);
    } else if (x1 < x0)
        swap(x1, x0);
    else if (y1 < y0)
        swap(y1, y0);

    double x = x0, y = y0, y10 = abs(y1 - y0), x10 = abs(x1 - x0), dx = 1, dy = y10 / x10;

    while (x <= x1)
    {
        image.set(x, y, white);
        x += dx;
        y += dy;
    }
    image.write_tga_file("LineDDA.tga");
}

void Circle (int x0, int y0, int R,TGAImage image )
{
    for (int x=0; x<=R / sqrt(2); x++)
    {
        int y = (int)(sqrt(pow(R,2) - pow(x,2)));
        image.set(x0 + x, y0 + y, white);
        image.set(x0 + y, y0 + x, white);
        image.set(x0 + y, y0 - x, white);
        image.set(x0 + x, y0 - y, white);
        image.set(x0 - x, y0 - y, white);
        image.set(x0 - y, y0 - x, white);
        image.set(x0 - y, y0 + x, white);
        image.set(x0 - x, y0 + y, white);
        image.write_tga_file("Circle.tga");
    }
}

void BrezenhemCircle (int x0, int y0, int R,TGAImage image)
{
    int d = 1 - 2 * R, x = 0, y = R, error = 0;

    while (y >= 0)
    {
        image.set(x0 + x, y0 + y, white);
        image.set(x0 + x, y0 - y, white);
        image.set(x0 - x, y0 + y, white);
        image.set(x0 - x, y0 - y, white);
        error = 2 * (d + y) - 1 ;

        if ((d<0) && (error < 0 ))
        {
            x++;
            d+= (2 * x +1);
            continue;
        }
        if (d>0 && error >0)
        {
            --y;
            d-=2*y + 1;
            continue;
        }
        ++x;
        --y;
        d+=2*(x-y);
    }
    image.write_tga_file("BrezenhemCircle.tga");

}

int main()
{
    TGAImage image (1000, 1000, TGAImage::RGB);

    BrezenhemLine ( 0, 0, 150, 150, image);

    DrawLineDDA (150, 150, 0, 0, image);

    Circle(500, 500, 500, image);

    BrezenhemCircle (60, 60, 30, image);

    return 0;
}
